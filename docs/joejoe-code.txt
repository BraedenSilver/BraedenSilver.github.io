Joejoe Code Reference
=====================

Page Markup (`pages/easter-eggs/joejoejoe/index.html`)
------------------------------------------------------
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Joejoejoe Playground | Braeden Silver</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="description"
      content="Generate bright, playful Joejoejoe characters in random sizes and colors for personal branding experiments."
    />
    <meta property="og:title" content="Joejoejoe Playground | Braeden Silver" />
    <meta
      property="og:description"
      content="Spin up randomized Joejoejoe mascots, remix their colors, and grab a quick screenshot to share."
    />
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="stylesheet" href="/assets/site.css" />
    <link rel="stylesheet" href="/assets/joejoejoe.css" />
  </head>
  <body class="joejoe-page joejoejoe-page" data-section="joejoejoe">
    <div id="site-header">
      <noscript>
        <div class="noscript-banner" role="alert">
          JavaScript powers the interactive parts of this site. Please enable it
          to explore everything on BraedenSilver.com.
          <a href="/pages/help/enable-javascript/index.html">
            Learn how to turn on JavaScript.
          </a>
        </div>
      </noscript>
    </div>

    <main id="main-content">
      <nav class="page-back" aria-label="Back navigation">
        <a
          class="project-entry back-link"
          href="/index.html"
          data-history-back
          aria-label="Go back to the previous page"
        >
          <span class="back-link-icon" aria-hidden="true">←</span>
          <span class="back-link-label">Go back to the previous page</span>
        </a>
      </nav>

      <h1>Joejoejoe Playground</h1>

      <section
        class="joejoejoe"
        id="joejoe-playground"
        aria-live="polite"
        aria-label="Joejoejoe generator"
      >
        <div class="joejoe-controls">
          <button type="button" class="joejoe-button" data-randomize>
            Randomize the Joejoes
          </button>
          <button type="button" class="joejoe-button" data-screenshot>
            Download Screenshot
          </button>
        </div>
        <div class="joejoe-stage" data-joejoe-stage>
          <p class="joejoe-loading" data-loading-message>
            Building your Joejoes…
          </p>
        </div>
      </section>
    </main>

    <div id="site-footer">
      <noscript>
        <div class="noscript-banner" role="alert">
          JavaScript powers the interactive parts of this site. Please enable it
          to explore everything on BraedenSilver.com.
          <a href="/pages/help/enable-javascript/index.html">
            Learn how to turn on JavaScript.
          </a>
        </div>
      </noscript>
    </div>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"
      integrity="sha512-BNaRQnYJYiPSqHHDb58B0yaPfCu+Wgds8Gp/gU33kqBtgNS4tSPHuGibyoeqMV/TJlSKda6FXzoEyYGjTe+vXA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script src="/js/site.js" defer></script>
    <script src="/js/joejoejoe.js" defer></script>
  </body>
</html>
```

Color Tokens (`assets/site.css`)
--------------------------------
```css
:root {
  --color-joejoe-skin: #f92672;
  --color-joejoe-border: #000;
  --color-joejoe-pupil: #000;
  --color-joejoe-sclera: #fff;
}

html.theme-dark {
  --color-joejoe-skin: #f92672;
  --color-joejoe-border: #000;
  --color-joejoe-pupil: #000;
  --color-joejoe-sclera: #fff;
}
```

Footer Markup (`partials/footer.html`)
--------------------------------------
```html
<div class="joejoe-peek footer-eyes" aria-hidden="true">
  <div class="head">
    <div class="eye left"><div class="pupil"></div></div>
    <div class="eye right"><div class="pupil"></div></div>
  </div>
</div>
```

Footer Styles (`assets/site.css`)
---------------------------------
```css
.joejoe-peek {
  position: absolute;
  bottom: -30px;
  right: 10px;
  width: 160px;
  height: 120px;
  overflow: visible;
}

.joejoe-peek .head {
  position: absolute;
  top: 0;
  right: 0;
  width: 120px;
  height: 120px;
  border: 2px solid var(--color-joejoe-border);
  border-radius: 50%;
  background: var(--color-joejoe-skin);
  box-shadow: 4px 4px 0 var(--color-shadow);
}

.footer-eyes .eye {
  --eye-size: 28px;
  --eye-border: 2px;
  width: var(--eye-size);
  height: var(--eye-size);
  border-radius: 50%;
  background: var(--color-joejoe-sclera);
  border: var(--eye-border) solid var(--color-joejoe-border);
  position: absolute;
  overflow: hidden;
  transition: all 150ms ease;
}

.footer-eyes .eye.left {
  left: 24px;
  --eye-top: 38px;
  top: var(--eye-top);
}

.footer-eyes .eye.right {
  right: 24px;
  --eye-top: 38px;
  top: var(--eye-top);
}

.footer-eyes .pupil {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: var(--color-joejoe-pupil);
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%) translate3d(0, 0, 0);
  transition: transform var(--pupil-transition-duration, 80ms) ease;
  will-change: transform;
}

.footer-eyes .eye.wink {
  height: 0;
  top: calc(var(--eye-top) + var(--eye-size) / 2 - var(--eye-border) / 2);
  border: none;
  border-top: var(--eye-border) solid var(--color-joejoe-border);
  border-radius: 0;
}

.footer-eyes .eye.wink .pupil {
  display: none;
}

body.joejoe-page .joejoe-peek {
  display: none;
}

body.joejoe-page main {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  text-align: center;
}

.joejoe-full {
  position: relative;
  width: 320px;
  height: 320px;
}

.joejoe-full .head {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 5px solid var(--color-joejoe-border);
  border-radius: 50%;
  background: var(--color-joejoe-skin);
}

.joejoe-full.footer-eyes .eye {
  position: absolute;
  --eye-size: 75px;
  --eye-border: 5px;
  width: var(--eye-size);
  height: var(--eye-size);
  border: var(--eye-border) solid var(--color-joejoe-border);
  border-radius: 50%;
  background: var(--color-joejoe-sclera);
  overflow: hidden;
  transition: all 150ms ease;
}

.joejoe-full.footer-eyes .eye.left {
  left: 64px;
  --eye-top: 101px;
  top: var(--eye-top);
}

.joejoe-full.footer-eyes .eye.right {
  right: 64px;
  --eye-top: 101px;
  top: var(--eye-top);
}

.joejoe-full.footer-eyes .pupil {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: var(--color-joejoe-pupil);
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%) translate3d(0, 0, 0);
  transition: transform 60ms linear;
  will-change: transform;
}

@media (min-width: 900px) {
  .joejoe-peek {
    right: 10px;
    left: auto;
    transform: none;
  }
}
```

Footer Behaviour (`js/site.js`)
--------------------------------
```js
function initKonamiCode() {
  if (typeof document === "undefined") {
    return;
  }

  const eggs = getEasterEggPages();
  if (!eggs.length) {
    return;
  }

  const sequence = [
    "arrowup",
    "arrowup",
    "arrowdown",
    "arrowdown",
    "arrowleft",
    "arrowright",
    "arrowleft",
    "arrowright",
    "b",
    "a",
  ];

  const buffer = [];
  const eyeSequence = ["left", "right", "left", "right"];
  const eyeBuffer = [];
  let eyeResetTimeout = null;
  let previousFocus = null;

  const resetEyeBuffer = () => {
    eyeBuffer.length = 0;
    if (eyeResetTimeout !== null) {
      if (typeof window !== "undefined") {
        window.clearTimeout(eyeResetTimeout);
      }
      eyeResetTimeout = null;
    }
  };

  const removeOverlay = () => {
    const overlay = document.getElementById("konami-overlay");
    if (!overlay) return;
    overlay.remove();
    document.body.classList.remove("konami-active");

    if (
      previousFocus &&
      typeof previousFocus.focus === "function" &&
      document.contains(previousFocus)
    ) {
      previousFocus.focus();
    }

    previousFocus = null;
    buffer.length = 0;
    resetEyeBuffer();
  };

  const buildMenuLink = (egg) => {
    const link = document.createElement("a");
    link.className = "konami-link";
    link.href = egg.href;
    link.setAttribute("data-easter-egg", egg.section || "");

    const label = document.createElement("span");
    label.className = "konami-link-label";
    label.textContent = egg.label;
    link.appendChild(label);

    if (egg.description) {
      const hint = document.createElement("span");
      hint.className = "konami-link-hint";
      hint.textContent = egg.description;
      link.appendChild(hint);
    }

    return link;
  };

  const spawnOverlay = () => {
    if (document.getElementById("konami-overlay")) return;

    previousFocus =
      document.activeElement instanceof HTMLElement
        ? document.activeElement
        : null;

    const overlay = document.createElement("div");
    overlay.id = "konami-overlay";
    overlay.className = "konami-overlay";
    overlay.setAttribute("role", "dialog");
    overlay.setAttribute("aria-modal", "true");
    overlay.setAttribute("aria-labelledby", "konami-title");

    const panel = document.createElement("div");
    panel.className = "konami-panel";
    panel.addEventListener("click", (event) => event.stopPropagation());

    const title = document.createElement("h2");
    title.id = "konami-title";
    title.textContent = "Super Secret Menu";

    const intro = document.createElement("p");
    intro.className = "konami-intro";
    intro.textContent = "Pick an easter egg destination below.";

    const menu = document.createElement("div");
    menu.className = "konami-links";
    eggs.forEach((egg) => menu.appendChild(buildMenuLink(egg)));

    const actions = document.createElement("div");
    actions.className = "konami-actions";

    const close = document.createElement("button");
    close.type = "button";
    close.className = "konami-action konami-close";
    close.textContent = "Close menu";
    close.addEventListener("click", removeOverlay);
    actions.appendChild(close);

    panel.appendChild(title);
    panel.appendChild(intro);
    panel.appendChild(menu);
    panel.appendChild(actions);

    overlay.appendChild(panel);

    const getFocusableControls = () =>
      Array.from(
        panel.querySelectorAll(
          'a[href]:not([tabindex="-1"]), button:not([disabled])',
        ),
      );

    overlay.addEventListener("keydown", (event) => {
      if (event.key !== "Tab") return;
      const focusable = getFocusableControls();
      if (!focusable.length) return;
      event.preventDefault();
      const currentIndex = focusable.indexOf(document.activeElement);
      let nextIndex = currentIndex;
      if (currentIndex === -1) {
        nextIndex = 0;
      } else if (event.shiftKey) {
        nextIndex = (currentIndex - 1 + focusable.length) % focusable.length;
      } else {
        nextIndex = (currentIndex + 1) % focusable.length;
      }
      focusable[nextIndex].focus();
    });

    overlay.addEventListener("focusin", (event) => {
      const focusable = getFocusableControls();
      if (!focusable.length) return;
      if (!focusable.includes(event.target)) {
        focusable[0].focus();
      }
    });

    overlay.addEventListener("click", removeOverlay);

    document.body.appendChild(overlay);
    document.body.classList.add("konami-active");
    buffer.length = 0;
    resetEyeBuffer();

    requestAnimationFrame(() => {
      const focusable = getFocusableControls();
      if (focusable.length) {
        focusable[0].focus();
      } else {
        close.focus();
      }
    });
  };

  const scheduleEyeReset = () => {
    if (typeof window === "undefined") {
      return;
    }
    if (eyeResetTimeout !== null) {
      window.clearTimeout(eyeResetTimeout);
    }
    eyeResetTimeout = window.setTimeout(() => {
      eyeResetTimeout = null;
      eyeBuffer.length = 0;
    }, 4000);
  };

  const registerEyeInput = (side) => {
    if (document.body.classList.contains("konami-active")) {
      return;
    }

    eyeBuffer.push(side);
    if (eyeBuffer.length > eyeSequence.length) {
      eyeBuffer.shift();
    }

    scheduleEyeReset();

    if (
      eyeBuffer.length === eyeSequence.length &&
      eyeSequence.every((expected, index) => eyeBuffer[index] === expected)
    ) {
      spawnOverlay();
    }
  };

  document.addEventListener("keydown", (event) => {
    if (event.metaKey || event.ctrlKey || event.altKey) return;

    const target = event.target;
    if (
      target instanceof HTMLElement &&
      (target.isContentEditable ||
        ["INPUT", "TEXTAREA"].includes(target.tagName) ||
        target.getAttribute("role") === "textbox")
    ) {
      return;
    }

    if (
      event.key === "Escape" &&
      document.body.classList.contains("konami-active")
    ) {
      event.preventDefault();
      removeOverlay();
      return;
    }

    const key = event.key.toLowerCase();
    buffer.push(key);
    if (buffer.length > sequence.length) {
      buffer.shift();
    }

    if (
      buffer.length === sequence.length &&
      sequence.every((expected, index) => buffer[index] === expected)
    ) {
      spawnOverlay();
    }
  });

  const eyes = document.querySelectorAll(
    ".footer-eyes .eye.left, .footer-eyes .eye.right",
  );
  if (eyes.length) {
    eyes.forEach((eye) => {
      const side = eye.classList.contains("left")
        ? "left"
        : eye.classList.contains("right")
          ? "right"
          : "";
      if (!side) return;

      const trigger = () => registerEyeInput(side);

      if (typeof window !== "undefined" && "PointerEvent" in window) {
        eye.addEventListener("pointerdown", trigger);
      } else {
        eye.addEventListener("click", trigger);
      }
    });
  }
}
```

```js
// Tiny googly eyes in footer
(() => {
  const eyes = document.querySelectorAll(".footer-eyes .eye");
  const interactiveParts = document.querySelectorAll(
    ".footer-eyes .eye, .footer-eyes .mouth",
  );
  if (!interactiveParts.length) return;

  const pointerFineQuery =
    typeof window.matchMedia === "function"
      ? window.matchMedia("(pointer: fine)")
      : null;
  const reduceMotionQuery =
    typeof window.matchMedia === "function"
      ? window.matchMedia("(prefers-reduced-motion: reduce)")
      : null;

  const tiltTimeouts = new WeakMap();

  function movePupils(x, y) {
    eyes.forEach((eye) => {
      const pupil = eye.querySelector(".pupil");
      if (!pupil) return;
      const rect = eye.getBoundingClientRect();
      if (!rect.width || !rect.height) return;
      const cx = rect.left + rect.width / 2;
      const cy = rect.top + rect.height / 2;
      const dx = x - cx;
      const dy = y - cy;
      const radius = rect.width * 0.25;
      const angle = Math.atan2(dy, dx);
      const px = Math.cos(angle) * radius;
      const py = Math.sin(angle) * radius;
      pupil.style.transform = `translate(-50%, -50%) translate(${px}px, ${py}px)`;
    });
  }

  function randomizePupils() {
    eyes.forEach((eye) => {
      const pupil = eye.querySelector(".pupil");
      if (!pupil) return;
      const rect = eye.getBoundingClientRect();
      if (!rect.width || !rect.height) return;
      const radius = rect.width * 0.3;
      const angle = Math.random() * Math.PI * 2;
      const magnitude = radius * (0.35 + Math.random() * 0.65);
      const px = Math.cos(angle) * magnitude;
      const py = Math.sin(angle) * magnitude;
      pupil.style.transform = `translate(-50%, -50%) translate(${px}px, ${py}px)`;
    });
  }

  function centerPupils() {
    eyes.forEach((eye) => {
      const pupil = eye.querySelector(".pupil");
      if (pupil) pupil.style.transform = "translate(-50%, -50%) translate(0, 0)";
    });
  }

  function enablePointerTracking() {
    const handlePointerMove = (event) =>
      movePupils(event.clientX, event.clientY);
    const handlePointerLeave = () => centerPupils();

    window.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("mouseleave", handlePointerLeave);
    window.addEventListener("blur", handlePointerLeave);

    return () => {
      window.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("mouseleave", handlePointerLeave);
      window.removeEventListener("blur", handlePointerLeave);
      centerPupils();
    };
  }

  function enableRandomMotion() {
    const pupils = Array.from(
      document.querySelectorAll(".footer-eyes .pupil"),
    );
    pupils.forEach((pupil) => {
      pupil.style.setProperty("--pupil-transition-duration", "320ms");
    });

    let timeoutId = null;

    const scheduleNext = () => {
      const delay = 1500 + Math.random() * 1500;
      timeoutId = window.setTimeout(() => {
        randomizePupils();
        scheduleNext();
      }, delay);
    };

    const isDocumentVisible = () => {
      return typeof document.visibilityState === "string"
        ? document.visibilityState === "visible"
        : true;
    };

    const start = () => {
      if (timeoutId !== null || !isDocumentVisible()) {
        return;
      }
      randomizePupils();
      scheduleNext();
    };

    const stop = () => {
      if (timeoutId === null) return;
      window.clearTimeout(timeoutId);
      timeoutId = null;
    };

    const handleVisibilityChange = () => {
      if (!isDocumentVisible()) {
        stop();
        centerPupils();
      } else {
        start();
      }
    };

    start();
    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      stop();
      document.removeEventListener("visibilitychange", handleVisibilityChange);
      pupils.forEach((pupil) => {
        pupil.style.removeProperty("--pupil-transition-duration");
      });
      centerPupils();
    };
  }

  let activeCleanup = null;
  let currentMode = "";

  const applyMode = () => {
    const reduceMotion = prefersReducedMotion();
    const shouldTrackPointer =
      !reduceMotion && (pointerFineQuery ? pointerFineQuery.matches : true);
    const nextMode = reduceMotion
      ? "static"
      : shouldTrackPointer
        ? "pointer"
        : "random";

    if (nextMode === currentMode) {
      return;
    }

    activeCleanup?.();
    activeCleanup = null;
    currentMode = nextMode;

    if (nextMode === "pointer") {
      activeCleanup = enablePointerTracking();
    } else if (nextMode === "random") {
      activeCleanup = enableRandomMotion();
    } else {
      centerPupils();
    }
  };

  applyMode();

  const handlePointerChange = () => applyMode();
  if (pointerFineQuery) {
    if (typeof pointerFineQuery.addEventListener === "function") {
      pointerFineQuery.addEventListener("change", handlePointerChange);
    } else if (typeof pointerFineQuery.addListener === "function") {
      pointerFineQuery.addListener(handlePointerChange);
    }
  }

  if (reduceMotionQuery) {
    const handleReduceMotionChange = () => applyMode();
    if (typeof reduceMotionQuery.addEventListener === "function") {
      reduceMotionQuery.addEventListener("change", handleReduceMotionChange);
    } else if (typeof reduceMotionQuery.addListener === "function") {
      reduceMotionQuery.addListener(handleReduceMotionChange);
    }
  }

  interactiveParts.forEach((feature) => {
    feature.addEventListener("click", () => {
      const container = feature.closest(".footer-eyes");
      if (container) {
        const existing = tiltTimeouts.get(container);
        if (typeof existing === "number") {
          window.clearTimeout(existing);
        }
        container.classList.add("wink-tilt");
        const timeoutId = window.setTimeout(() => {
          container.classList.remove("wink-tilt");
          tiltTimeouts.delete(container);
        }, 1500);
        tiltTimeouts.set(container, timeoutId);
      }

      if (feature.classList.contains("wink")) return;
      feature.classList.add("wink");
      window.setTimeout(() => feature.classList.remove("wink"), 1500);
    });
  });
})();
```

Joejoejoe Page Styles (`assets/joejoejoe.css`)
---------------------------------------------
```css
body.joejoejoe-page {
  --joejoe-panel-bg: var(--color-surface);
  --joejoe-panel-border: var(--color-border);
  --joejoe-panel-shadow: var(--color-shadow);
  --joejoe-stage-bg: var(--color-panel-muted);
  --joejoe-button-bg: var(--color-strong-bg);
  --joejoe-button-text: var(--color-strong-text);
  --joejoe-button-shadow: var(--color-shadow);
}

body.joejoejoe-page .footer-static {
  display: none;
}

html.theme-dark body.joejoejoe-page {
  --joejoe-panel-bg: var(--color-panel-muted);
  --joejoe-stage-bg: var(--color-blog-filter-bg);
}

.joejoejoe {
  display: grid;
  gap: clamp(1.5rem, 3vw, 2.75rem);
  align-items: center;
  justify-items: center;
  padding: clamp(1.5rem, 3vw, 2.75rem);
  border: 2px solid var(--joejoe-panel-border);
  border-radius: 24px;
  background: var(--joejoe-panel-bg);
  box-shadow: 10px 10px 0 var(--joejoe-panel-shadow);
}

.joejoe-controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1rem;
}

.joejoe-button {
  appearance: none;
  border: 2px solid var(--joejoe-panel-border);
  border-radius: 999px;
  padding: 0.85rem 1.85rem;
  font-size: 1.05rem;
  font-weight: 700;
  letter-spacing: 0.02em;
  background: var(--joejoe-button-bg);
  color: var(--joejoe-button-text);
  box-shadow: 4px 4px 0 var(--joejoe-button-shadow);
  cursor: pointer;
  transition: transform 0.15s ease, box-shadow 0.15s ease, background 0.15s ease,
    color 0.15s ease;
}

.joejoe-button:hover,
.joejoe-button:focus-visible {
  transform: translate(-2px, -2px);
  box-shadow: 6px 6px 0 var(--joejoe-button-shadow);
}

.joejoe-button:active {
  transform: translate(1px, 1px);
  box-shadow: 2px 2px 0 var(--joejoe-button-shadow);
}

.joejoe-button[disabled] {
  opacity: 0.65;
  cursor: not-allowed;
  transform: none;
  box-shadow: 2px 2px 0 var(--joejoe-button-shadow);
}

.joejoe-stage {
  width: 100%;
  background: var(--joejoe-stage-bg);
  border: 2px solid var(--joejoe-panel-border);
  border-radius: 20px;
  padding: clamp(1.5rem, 4vw, 3.5rem);
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: clamp(1.5rem, 4vw, 3rem);
  position: relative;
  isolation: isolate;
}

.joejoe-loading {
  margin: 0;
  font-size: 1.1rem;
  color: var(--color-muted-text);
}

@media (max-width: 720px) {
  .joejoejoe {
    padding: 1.5rem;
    border-radius: 20px;
  }

  .joejoe-stage {
    border-radius: 18px;
  }

  .joejoe-button {
    width: 100%;
    max-width: 320px;
  }
}


.joejoe {
  position: relative;
  flex: 0 0 auto;
  width: var(--joejoe-size, 320px);
  height: var(--joejoe-size, 320px);
  --joejoe-outline: 5px;
  --joejoe-eye-size: calc(var(--joejoe-size) * 0.234375);
  --joejoe-eye-top: calc(var(--joejoe-size) * 0.315625);
  --joejoe-eye-inset: calc(var(--joejoe-size) * 0.2);
  --joejoe-pupil-size: calc(var(--joejoe-size) * 0.1);
  --joejoe-head-tilt: 0deg;
  --pupil-offset-x: 0px;
  --pupil-offset-y: 0px;
  display: flex;
  align-items: center;
  justify-content: center;
  pointer-events: none;
}

.joejoe .head {
  position: relative;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: var(--joejoe-outline) solid var(--joejoe-border-color, var(--color-joejoe-border));
  background: var(--joejoe-skin-color, var(--color-joejoe-skin));
  box-shadow: 4px 4px 0 var(--color-shadow);
  transform: rotate(var(--joejoe-head-tilt));
  transform-origin: center;
  transition: transform 220ms ease;
}

.joejoe .eye {
  position: absolute;
  width: var(--joejoe-eye-size);
  height: var(--joejoe-eye-size);
  border-radius: 50%;
  border: var(--joejoe-outline) solid var(--joejoe-border-color, var(--color-joejoe-border));
  background: var(--color-joejoe-sclera);
  overflow: hidden;
}

.joejoe .eye.left {
  left: var(--joejoe-eye-inset);
  top: var(--joejoe-eye-top);
}

.joejoe .eye.right {
  right: var(--joejoe-eye-inset);
  top: var(--joejoe-eye-top);
}

.joejoe .pupil {
  position: absolute;
  left: 50%;
  top: 50%;
  width: var(--joejoe-pupil-size);
  height: var(--joejoe-pupil-size);
  border-radius: 50%;
  background: var(--color-joejoe-pupil);
  transform: translate(-50%, -50%) translate(var(--pupil-offset-x), var(--pupil-offset-y));
  transition: transform 160ms ease;
}

```

Joejoejoe Page Script (`js/joejoejoe.js`)
-----------------------------------------
```js
(() => {
  const stage = document.querySelector('[data-joejoe-stage]');
  const randomizeButton = document.querySelector('[data-randomize]');
  const screenshotButton = document.querySelector('[data-screenshot]');
  const loadingMessage = document.querySelector('[data-loading-message]');

  if (!stage || !randomizeButton || !screenshotButton) {
    return;
  }

  const config = Object.freeze({
    minCount: 9,
    maxCount: 15,
    minSize: 140,
    maxSize: 340,
    pupilRangeFactor: 0.35,
    borderColor: '#111',
  });

  let isGenerating = false;
  let isCapturing = false;

  const randomizeDefaultLabel = randomizeButton.textContent.trim();
  const screenshotDefaultLabel = screenshotButton.textContent.trim();

  function randomRange(min, max) {
    return Math.random() * (max - min) + min;
  }

  function randomInt(min, max) {
    return Math.floor(randomRange(min, max + 1));
  }

  function hslToRgb(h, s, l) {
    if (s <= 0) {
      const value = Math.round(l * 255);
      return [value, value, value];
    }

    const hue2rgb = (p, q, t) => {
      let temp = t;
      if (temp < 0) temp += 1;
      if (temp > 1) temp -= 1;
      if (temp < 1 / 6) return p + (q - p) * 6 * temp;
      if (temp < 1 / 2) return q;
      if (temp < 2 / 3) return p + (q - p) * (2 / 3 - temp) * 6;
      return p;
    };

    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    const p = 2 * l - q;
    const r = hue2rgb(p, q, h + 1 / 3);
    const g = hue2rgb(p, q, h);
    const b = hue2rgb(p, q, h - 1 / 3);
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  }

  function getRelativeLuminance([r, g, b]) {
    const channel = (value) => {
      const scaled = value / 255;
      return scaled <= 0.03928
        ? scaled / 12.92
        : Math.pow((scaled + 0.055) / 1.055, 2.4);
    };
    const [rLin, gLin, bLin] = [r, g, b].map(channel);
    return 0.2126 * rLin + 0.7152 * gLin + 0.0722 * bLin;
  }

  function buildColorSet() {
    const hue = randomInt(0, 359);
    const saturation = randomRange(72, 95);
    const lightness = randomRange(55, 70);
    const accentLightness = Math.max(28, lightness - randomRange(18, 26));
    const accentSaturation = Math.min(100, saturation + randomRange(0, 6));

    const headColor = `hsl(${hue}deg, ${Math.round(saturation)}%, ${Math.round(lightness)}%)`;
    const accentColor = `hsl(${hue}deg, ${Math.round(accentSaturation)}%, ${Math.round(
      accentLightness,
    )}%)`;

    const accentRgb = hslToRgb(
      (hue % 360) / 360,
      Math.min(1, Math.max(0, accentSaturation / 100)),
      Math.min(1, Math.max(0, accentLightness / 100)),
    );
    const accentTextColor = getRelativeLuminance(accentRgb) > 0.5 ? '#111' : '#fff';

    return {
      headColor,
      accentColor,
      accentTextColor,
    };
  }

  function createJoejoeElement() {
    const size = randomInt(config.minSize, config.maxSize);
    const colors = buildColorSet();
    const joejoe = document.createElement('div');
    joejoe.className = 'joejoe';
    joejoe.style.setProperty('--joejoe-size', `${size}px`);
    joejoe.style.setProperty('--joejoe-skin-color', colors.headColor);
    joejoe.style.setProperty('--joejoe-border-color', config.borderColor);
    const tilt = randomRange(-12, 12);
    joejoe.style.setProperty('--joejoe-head-tilt', `${tilt.toFixed(2)}deg`);

    const pupilRange = size * 0.1 * config.pupilRangeFactor;
    const offsetX = randomRange(-pupilRange, pupilRange);
    const offsetY = randomRange(-pupilRange * 0.75, pupilRange * 0.65);
    joejoe.style.setProperty('--pupil-offset-x', `${offsetX.toFixed(2)}px`);
    joejoe.style.setProperty('--pupil-offset-y', `${offsetY.toFixed(2)}px`);

    const head = document.createElement('div');
    head.className = 'head';

    const createEye = (position) => {
      const eye = document.createElement('div');
      eye.className = `eye ${position}`;
      const pupil = document.createElement('div');
      pupil.className = 'pupil';
      eye.appendChild(pupil);
      return eye;
    };

    const leftEye = createEye('left');
    const rightEye = createEye('right');

    head.append(leftEye, rightEye);
    joejoe.append(head);

    return {
      element: joejoe,
      accentColor: colors.accentColor,
      accentTextColor: colors.accentTextColor,
    };
  }

  function setButtonAccent(color, textColor) {
    document.body.style.setProperty('--joejoe-button-bg', color);
    document.body.style.setProperty('--joejoe-button-text', textColor);
  }

  function randomizeJoejoes() {
    if (isGenerating) return;
    isGenerating = true;

    randomizeButton.disabled = true;
    screenshotButton.disabled = true;
    stage.setAttribute('aria-busy', 'true');
    randomizeButton.textContent = 'Shuffling…';

    requestAnimationFrame(() => {
      const count = randomInt(config.minCount, config.maxCount);
      const fragment = document.createDocumentFragment();
      let accentApplied = false;

      for (let index = 0; index < count; index += 1) {
        const { element, accentColor, accentTextColor } = createJoejoeElement();
        fragment.appendChild(element);
        if (!accentApplied) {
          setButtonAccent(accentColor, accentTextColor);
          accentApplied = true;
        }
      }

      stage.replaceChildren(fragment);
      if (loadingMessage?.isConnected) {
        loadingMessage.remove();
      }

      randomizeButton.textContent = randomizeDefaultLabel;
      randomizeButton.disabled = false;
      screenshotButton.disabled = false;
      stage.removeAttribute('aria-busy');
      isGenerating = false;
    });
  }

  async function captureScreenshot() {
    if (isCapturing) return;
    if (typeof window.html2canvas !== 'function') {
      console.error('html2canvas is unavailable.');
      return;
    }

    isCapturing = true;
    screenshotButton.disabled = true;
    screenshotButton.textContent = 'Preparing screenshot…';

    try {
      const canvas = await window.html2canvas(stage, {
        backgroundColor: window.getComputedStyle(document.body).backgroundColor,
        scale: Math.min(2, window.devicePixelRatio || 1.5),
        useCORS: true,
      });

      await new Promise((resolve, reject) => {
        canvas.toBlob(
          (blob) => {
            if (!blob) {
              reject(new Error('Screenshot capture failed.'));
              return;
            }
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `joejoe-playground-${Date.now()}.png`;
            document.body.appendChild(link);
            link.click();
            link.remove();
            requestAnimationFrame(() => {
              URL.revokeObjectURL(url);
              resolve();
            });
          },
          'image/png',
          0.95,
        );
      });
    } catch (error) {
      console.error('Failed to capture Joejoe screenshot', error);
      window.alert('Sorry, I could not capture the screenshot. Please try again.');
    } finally {
      screenshotButton.textContent = screenshotDefaultLabel;
      screenshotButton.disabled = false;
      isCapturing = false;
    }
  }

  randomizeButton.addEventListener('click', randomizeJoejoes);
  screenshotButton.addEventListener('click', captureScreenshot);

  randomizeJoejoes();
})();
```
